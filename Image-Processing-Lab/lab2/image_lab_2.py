# -*- coding: utf-8 -*-
"""image_lab_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X32puCg1W9SMtwCVuDYvdKBohqAAoi_1
"""


import numpy as np
import cv2
import matplotlib.pyplot as plt

image = cv2.imread('F:/4.1/CSE 4128 Image Lab/lab2/rubiks-cube.jpg',cv2.IMREAD_GRAYSCALE)

plt.title("Fig 2.     : Input Image")
plt.imshow(cv2.cvtColor(image,cv2.COLOR_BGR2RGB))
plt.show()

def guess_helper(x,y,sigma = 2):
  
  pixel_value = np.exp(-(x*x+y*y)/(2*sigma*sigma))
  return pixel_value

kernel_size =7
guess_kernel = np.zeros((kernel_size, kernel_size),dtype='float32')
n = (kernel_size-1)//2
for i in range(kernel_size):
  for j in range(kernel_size):
    guess_kernel[i][j] = guess_helper((i-n),(j-n),sigma = 2 )

def bilateral_filter(x,y,image,kernel_size, sigma=5):
  n = (kernel_size -1)//2
  center_intensity = image[x][y]
  new_filter = np.zeros((kernel_size,kernel_size),dtype='float32')
  
  for i in range(0,kernel_size-n,1):
    for j in range(0,kernel_size-n,1):
      
      current_intensity = image[x+i-n][y+j-n]
      new_filter[i,j] = np.exp((-(current_intensity - center_intensity)**2)/(2*sigma*sigma))

  return new_filter

def muli(gauss_filter,bilateral_filter,kernel_size):
  final_filter = np.zeros((kernel_size,kernel_size),dtype='float32')
  for i in range(kernel_size):
    for j in range(kernel_size):
      final_filter[i][j] = gauss_filter[i][j]*bilateral_filter[i][j]

  summ = final_filter.sum()
  final_filter = final_filter/summ
  return final_filter

#kernel_size = 7
n = (kernel_size -1)//2
image_size = 220
image = cv2.resize(image,(image_size,image_size))
result = np.zeros((image_size,image_size),dtype = 'float32')
for x in range(image_size):
  for y in range(image_size):
    sum = 0
    bi_filter = bilateral_filter(x,y,image,kernel_size,sigma=5)
    kernel = muli(guess_kernel,bi_filter,kernel_size)
    for i in range(kernel_size):
      for j in range(kernel_size):
        sum+= kernel[i,j]*image[x-i-n,y-j-n]
    result[x,y] = sum

#plt.imshow(cv2.cvtColor(result,cv2.COLOR_BGR2RGB))
#plt.show()

from skimage.exposure import rescale_intensity
out = rescale_intensity(result, in_range=(0, 255))

plt.title("Fig 2.     : Bilateral implementation output")
plt.imshow(cv2.cvtColor(out,cv2.COLOR_BGR2RGB))
plt.show()

#-----cv2----
out = cv2.bilateralFilter(image, 7,5,2)
plt.imshow(cv2.cvtColor(out,cv2.COLOR_BGR2RGB))
plt.show()
